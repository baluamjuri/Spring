
https://www.baeldung.com/spring-cache-tutorial
@EnableCaching
@Cacheable("addresses") - 
@Cacheable({"addresses", "directory"}) - 
@CacheEvict(value="addresses", allEntries=true) - additional parameter allEntries in conjunction with the cache to be emptied; this will clear all the entries in the cache addresses and prepare it for new data
@CachePut(value="addresses")
The difference between @Cacheable and @CachePut is that @Cacheable will skip running the method, whereas @CachePut will actually run the method and then put its results in the cache.
@Caching(evict = { 
  @CacheEvict("addresses"), 
  @CacheEvict(value="directory", key="#customer.name") })
we can group multiple caching annotations with @Caching, and use it to implement our own customized caching logic.

@CacheConfig(cacheNames={"addresses"})
public class CustomerDataService {}

@CachePut(value="addresses", condition="#customer.name=='Tom'")
public String getAddress(Customer customer) {...}

@CachePut(value="addresses", unless="#result.length()<64")
public String getAddress(Customer customer) {...}

https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/cache.html
================================================================================================================================
package com.amjuri.config;

import java.lang.reflect.Method;
import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.cache.Caching;

import org.apache.commons.lang3.StringUtils;
import org.ehcache.config.CacheConfiguration;
import org.ehcache.config.builders.CacheConfigurationBuilder;
import org.ehcache.config.builders.CacheEventListenerConfigurationBuilder;
import org.ehcache.config.builders.ExpiryPolicyBuilder;
import org.ehcache.config.builders.ResourcePoolsBuilder;
import org.ehcache.config.units.MemoryUnit;
import org.ehcache.core.config.DefaultConfiguration;
import org.ehcache.event.CacheEvent;
import org.ehcache.event.CacheEventListener;
import org.ehcache.jsr107.EhcacheCachingProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.cache.jcache.JCacheCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import lombok.extern.slf4j.Slf4j;

@Configuration
@EnableCaching
public class CacheConfig{
	
	@Autowired
	private CacheProperties cacheProperties;
 
    @SuppressWarnings("rawtypes")
	public CacheConfiguration<Long, List> actionEdgesCacheConfig() {
        return CacheConfigurationBuilder
					.newCacheConfigurationBuilder(
							Long.class, 
							List.class,
							ResourcePoolsBuilder.heap(cacheProperties.getEntries())
												.offheap(cacheProperties.getHeapSize(), MemoryUnit.MB))
					.withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofMinutes(cacheProperties.getTimeToLive())))
					.add(eventListenerConfig())
					.build();
    }
    
    public CacheEventListenerConfigurationBuilder eventListenerConfig() {
    	return CacheEventListenerConfigurationBuilder
				.newEventListenerConfiguration(new EhcacheCacheEventLogger(), cacheProperties.getEventsToListen())
				.unordered()
				.asynchronous();
    }
    
    @Bean
	public CacheManager ehcacheCacheManager() {
		Map<String, CacheConfiguration<?, ?>> caches = new HashMap<>();
		caches.put("actionEdges", actionEdgesCacheConfig());
		
		EhcacheCachingProvider provider = (EhcacheCachingProvider) Caching.getCachingProvider();
		org.ehcache.config.Configuration configuration = new DefaultConfiguration(caches,
				provider.getDefaultClassLoader());

		return new JCacheCacheManager(
				provider.getCacheManager(provider.getDefaultURI(), (org.ehcache.config.Configuration) configuration));
	}
    
    @Slf4j
	public static class EhcacheCacheEventLogger implements CacheEventListener<Object, Object> {

		@Override
		public void onEvent(CacheEvent<? extends Object, ? extends Object> cacheEvent) {
			log.info("Cache event = {}, Key = {},  Old value = {}, New value = {}", cacheEvent.getType(),
					cacheEvent.getKey(), cacheEvent.getOldValue(), cacheEvent.getNewValue());
		}

	}
}

=========================

@Getter
@Setter
public static class CacheProperties{
	//Number of pool entries in heap
	private long entries;
	
	//Heap size in MB
	private long heapSize;
	
	//Expiry time in minutes
	private long timeToLive;
	
	//Events logged by listening
	private Set<EventType> eventsToListen;
}

==========================

@GetMapping("clearAll")
public ResponseEntity<Void> clearAllCaches() {
	log.info("Refreshing/Clearing the cache");
	cacheService.evictAllCaches();
	return ResponseEntity.ok().build();
}

==========================

package com.amjuri.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.CacheManager;
import org.springframework.stereotype.Service;
......

@Service
public class CacheServiceImpl implements CacheService{

    @Autowired
    private CacheManager cacheManager;

    @Override
    public void evictAllCaches() {
        cacheManager.getCacheNames().stream()
          .forEach(cacheName -> cacheManager.getCache(cacheName).clear());
    }
    
    @Override
    public void evictAllCacheValues(String cacheName) {
        cacheManager.getCache(cacheName).clear();
    }
}

